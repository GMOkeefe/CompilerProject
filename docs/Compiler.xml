<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Compiler</name>
    </assembly>
    <members>
        <member name="T:GMOKeefe.Compiler.Lex.FullReader">
            <summary>
            Reads the given text file in its entirety.
            </summary>
        </member>
        <member name="M:GMOKeefe.Compiler.Lex.FullReader.#ctor(System.String)">
            <summary>
            Creates a FullReader given the path of the file to be read.
            </summary>
            <param name="filePath">
            The path of the file to be read.
            </param>
        </member>
        <member name="M:GMOKeefe.Compiler.Lex.FullReader.Done">
            <summary>
            Indicates whether the FullReader has been used or not.
            </summary>
            <returns>
            A boolean value indicating if the FullReader has been fully used.
            </returns>
        </member>
        <member name="M:GMOKeefe.Compiler.Lex.FullReader.Read">
            <summary>
            Reads the text file.
            </summary>
            <returns>
            The entire contents of the text file.
            </returns>
        </member>
        <member name="T:GMOKeefe.Compiler.Lex.IReader">
            <summary>
            The Reader interface.\
            Defines the functionality necessary for the Lexer to read code.
            </summary>
        </member>
        <member name="M:GMOKeefe.Compiler.Lex.IReader.Done">
            <summary>
            Indicates whether the Reader has been used or not.
            </summary>
            <returns>
            A boolean value indicating if the Reader has been fully used.
            </returns>
        </member>
        <member name="M:GMOKeefe.Compiler.Lex.IReader.Read">
            <summary>
            Reads the text file, either whole or in part.
            </summary>
            <returns>
            Some portion of the text in the text file.
            </returns>
        </member>
        <member name="T:GMOKeefe.Compiler.Lex.LineReader">
            <summary>
            Reads the given text file line-by-line.
            </summary>
        </member>
        <member name="M:GMOKeefe.Compiler.Lex.LineReader.#ctor(System.String)">
            <summary>
            Creates a LineReader given the path of the file to be read.
            </summary>
            <param name="filePath">
            The path of the file to be read.
            </param>
        </member>
        <member name="M:GMOKeefe.Compiler.Lex.LineReader.Done">
            <summary>
            Indicates whether the LineReader has been used or not.
            </summary>
            <returns>
            A boolean value indicating if the LineReader has been fully used.
            </returns>
        </member>
        <member name="M:GMOKeefe.Compiler.Lex.LineReader.Read">
            <summary>
            Reads one line of the text file.
            </summary>
            <returns>
            One line of the text file.
            </returns>
        </member>
        <member name="T:GMOKeefe.Compiler.Lex.Organizer">
            <summary>
            Organizes a list of string tokens into a hierarchical structure based on opening and closing symbols.
            </summary>
        </member>
        <member name="M:GMOKeefe.Compiler.Lex.Organizer.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Creates a new Organizer based on a list of string tokens.
            </summary>
            <param name="tokens">
            The string tokens (presumably given by the Tokenizer).
            </param>
        </member>
        <member name="M:GMOKeefe.Compiler.Lex.Organizer.Organize">
            <summary>
            Organizes the string tokens into a list of IBodys.
            </summary>
            <returns>
            The hierarchical list of IBodys.
            </returns>
        </member>
        <member name="T:GMOKeefe.Compiler.Lex.Tokenizer">
            <summary>
            Tokenizes text files for parsing.
            </summary>
        </member>
        <member name="M:GMOKeefe.Compiler.Lex.Tokenizer.#ctor(System.String)">
            <summary>
            Constructs a Tokenizer to break down the given file.
            </summary>
            <param name="path">
            The path of the file to be lexed.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the file path is null.
            </exception>
        </member>
        <member name="M:GMOKeefe.Compiler.Lex.Tokenizer.#ctor(GMOKeefe.Compiler.Lex.IReader)">
            <summary>
            Constructs a Tokenizer to utilize the given IReader to break down the text.
            </summary>
            <param name="reader">
            The IReader to get the text of the file.
            </param>
        </member>
        <member name="M:GMOKeefe.Compiler.Lex.Tokenizer.Tokens">
            <summary>
            Tokenizes the text file in a way that is more interpretable to the compiler.
            </summary>
            <returns>
            The tokenized list.
            </returns>
        </member>
        <member name="T:GMOKeefe.Compiler.Parse.IBody">
            <summary>
            An interface that represents the union of the string and the list of IBodys.
            </summary>
        </member>
        <member name="M:GMOKeefe.Compiler.Parse.IBody.GetHashCode">
            <summary>
            Generates the hash code of this IBody.
            </summary>
            <returns>
            The hash code.
            </returns>
        </member>
        <member name="M:GMOKeefe.Compiler.Parse.IBody.Equals(System.Object)">
            <summary>
            Checks if the object is equal to another object.
            </summary>
            <param name="obj">
            The other object to test.
            </param>
            <returns>
            True if they are equal, false if not.
            </returns>
        </member>
        <member name="T:GMOKeefe.Compiler.Parse.ParentBody">
            <summary>
            An IBody that contains a list of IBody's.
            </summary>
        </member>
        <member name="M:GMOKeefe.Compiler.Parse.ParentBody.#ctor">
            <summary>
            Creates a new ParentBody.
            </summary>
        </member>
        <member name="M:GMOKeefe.Compiler.Parse.ParentBody.#ctor(System.Collections.Generic.List{GMOKeefe.Compiler.Parse.IBody})">
            <summary>
            Creates a new ParentBody given a list of child IBodys.
            </summary>
            <param name="children">
            The list of child IBodys that this ParentBody contains.
            </param>
        </member>
        <member name="M:GMOKeefe.Compiler.Parse.ParentBody.AddChild(GMOKeefe.Compiler.Parse.IBody)">
            <summary>
            Adds a new child IBody.
            </summary>
            <param name="child">
            The child IBody to be added.
            </param>
        </member>
        <member name="M:GMOKeefe.Compiler.Parse.ParentBody.Associate(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Converts a list of strings into a list of bodies. Call when encountering an opening paren for the first time.
            </summary>
            <param name="opener">
            The opening paren that starts this call.
            </param>
            <param name="rest">
            Every string in the list after the opening paren.
            </param>
            <returns>
            The strings in the list after the closing paren.
            </returns>
        </member>
        <member name="M:GMOKeefe.Compiler.Parse.ParentBody.GetHashCode">
            <summary>
            Generates a hash code for this ParentBody.
            </summary>
            <returns>
            The hash code representing the current state of the ParentBody.
            </returns>
        </member>
        <member name="M:GMOKeefe.Compiler.Parse.ParentBody.Equals(System.Object)">
            <summary>
            Checks equality with any object.
            </summary>
            <param name="obj">
            The object to compare with.
            </param>
            <returns>
            True if they are equal, false if not.
            </returns>
        </member>
        <member name="M:GMOKeefe.Compiler.Parse.ParentBody.Equals(GMOKeefe.Compiler.Parse.ParentBody)">
            <summary>
            Checks equality with another ParentBody.
            </summary>
            <param name="p">
            The other ParentBody.
            </param>
            <returns>
            True if the children match, false if not.
            </returns>
        </member>
        <member name="T:GMOKeefe.Compiler.Parse.StringBody">
            <summary>
            An IBody that contains a string.
            </summary>
        </member>
        <member name="M:GMOKeefe.Compiler.Parse.StringBody.#ctor(System.String)">
            <summary>
            Creates a new StringBody.
            </summary>
            <param name="body">
            The string that the StringBody contains.
            </param>
        </member>
        <member name="M:GMOKeefe.Compiler.Parse.StringBody.GetString">
            <summary>
            Retrieves the string that the StringBody contains.
            </summary>
            <returns>
            The string that the StringBody contains.
            </returns>
        </member>
        <member name="M:GMOKeefe.Compiler.Parse.StringBody.GetHashCode">
            <summary>
            Creates a hash code for the current StringBody.
            </summary>
            <returns>
            The hash code of the string inside the StringBody.
            </returns>
        </member>
        <member name="M:GMOKeefe.Compiler.Parse.StringBody.Equals(System.Object)">
            <summary>
            Checks for equality with any object.
            </summary>
            <param name="obj">
            The other object.
            </param>
            <returns>
            True if they are equal, false if not.
            </returns>
        </member>
        <member name="M:GMOKeefe.Compiler.Parse.StringBody.Equals(GMOKeefe.Compiler.Parse.StringBody)">
            <summary>
            Checks for equality with another StringBody.
            </summary>
            <param name="s">
            The other StringBody.
            </param>
            <returns>
            True if they are equal, false if not.
            </returns>
        </member>
        <member name="T:GMOKeefe.Compiler.Parse.UnmatchedParenException">
            <summary>
            An exception that represents a lack of a matching closing mark for a corresponding opening mark.
            </summary>
        </member>
        <member name="M:GMOKeefe.Compiler.Parse.UnmatchedParenException.#ctor(System.String)">
            <summary>
            Creates a new UnmatchedParenException.
            </summary>
            <param name="paren">
            The opening mark that caused this error.
            </param>
        </member>
        <member name="T:GMOKeefe.Compiler.Syntax.BoolExpr">
            <summary>
            Expression that contains a boolean value.
            </summary>
        </member>
        <member name="M:GMOKeefe.Compiler.Syntax.BoolExpr.#ctor(System.Boolean)">
            <summary>
            Creates a BoolExpr based on a given boolean.
            </summary>
            <param name="value">
            The boolean that sets the value.
            </param>
        </member>
        <member name="M:GMOKeefe.Compiler.Syntax.BoolExpr.Eval">
            <summary>
            Returns the IValue that this Expression evaluates to.
            </summary>
            <returns>
            The IValue that represents the value of this Expression.
            </returns>
        </member>
        <member name="T:GMOKeefe.Compiler.Syntax.BoolValue">
            <summary>
            Representation of a boolean value.
            </summary>
        </member>
        <member name="M:GMOKeefe.Compiler.Syntax.BoolValue.#ctor(System.Boolean)">
            <summary>
            Creates a BoolValue based on the given value.
            </summary>
            <param name="value">
            The boolean that sets the value.
            </param>
        </member>
        <member name="M:GMOKeefe.Compiler.Syntax.BoolValue.Value">
            <summary>
            Retrieves the actual value of this IValue.
            </summary>
            <returns>
            The boolean that represents the actual value.
            </returns>
        </member>
        <member name="T:GMOKeefe.Compiler.Syntax.IExpression">
            <summary>
            Interface for any AST Expression.
            </summary>
        </member>
        <member name="M:GMOKeefe.Compiler.Syntax.IExpression.Eval">
            <summary>
            Evaluates the expression and returns the value.
            </summary>
            <returns>
            The IValue representing the value of the expression.
            </returns>
        </member>
        <member name="T:GMOKeefe.Compiler.Syntax.IValue">
            <summary>
            The abstract representation of a value.
            </summary>
        </member>
        <member name="M:GMOKeefe.Compiler.Syntax.IValue.Value">
            <summary>
            Generates the native value.
            </summary>
            <returns>
            The natively represented value.
            </returns>
        </member>
    </members>
</doc>
